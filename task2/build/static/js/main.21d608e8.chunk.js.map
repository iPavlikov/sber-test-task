{"version":3,"sources":["components/Header/index.js","components/Table/components/Row/index.js","components/Table/index.js","components/Chart/index.js","App.js","hooks.js","serviceWorker.js","index.js"],"names":["Header","className","Row","usd","eur","Table","rates","map","row","key","id","ChartCanvas","chartEl","useRef","chart","useEffect","current","Chart","type","data","datasets","label","fill","options","animation","duration","destroy","labels","borderColor","update","ref","App","useState","rateHistory","setRateHistory","counter","appendRate","a","fetch","then","res","json","catch","console","error","USD","EUR","prevHistory","length","slice","timestamp","Date","now","formatRate","rate","toFixed","dayjs","format","callback","delay","savedCallback","interval","setInterval","clearInterval","useInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.21d608e8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.scss';\n\nexport function Header() {\n  return (\n    <header className='Header'>\n      Currency\n    </header>\n  ) \n}\n","import React from 'react';\n\nimport './style.scss'\n\nexport function Row({ usd, eur }) {\n  return (\n    <tr className='TableRow'>\n      <td className='TableRow__col'>&#8381; {usd}</td>\n      <td className='TableRow__col'>&#8381; {eur}</td>\n    </tr>\n  )\n}\n","import React from 'react';\n\nimport { Row } from './components/Row';\n\nimport './style.scss';\n\nexport function Table({ rates }) {\n  return (\n    <table className='Table'>\n      <thead className='Table__head'>\n        <tr className='Table__headRow'>\n          <td className='Table__headCol'>USD</td>\n          <td className='Table__headCol'>EUR</td>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          rates.map(row => (\n            <Row\n              key={row.id}\n              usd={row.usd}\n              eur={row.eur}\n            />\n          ))\n        }\n      </tbody>\n    </table>\n  )\n}","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nimport './style.scss';\n\nexport function ChartCanvas({ rates }) {\n  const chartEl = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    chart.current = new Chart(chartEl.current, {\n      type: 'line',\n      data: {\n        datasets: [\n          {\n            label: 'USD',\n            data: [],\n            fill: false\n          },\n          {\n            label: 'EUR',\n            data: [],\n            fill: false\n          }\n        ]\n      },\n      options: {\n        animation: {\n          duration: 0\n        },\n      }\n    })\n\n    return () => chart.current.destroy()\n  }, [])\n\n  useEffect(() => {\n    chart.current.data = {\n      ...chart.current.data,\n      labels: rates.labels,\n      datasets: [\n        {\n          label: 'USD',\n          data: rates.usd,\n          fill: false,\n          borderColor: '#b300b3'\n        },\n        {\n          label: 'EUR',\n          data: rates.eur,\n          fill: false,\n          borderColor: '#00b300'\n        }\n      ]\n    }\n    chart.current.update()\n  }, [rates])\n\n  return (\n    <canvas className='Chart' ref={chartEl} ></canvas>\n  )\n}","import React, { useState, useRef } from 'react';\nimport { useInterval } from './hooks';\n\nimport dayjs from 'dayjs';\n\nimport { Header } from './components/Header';\nimport { Table } from './components/Table';\nimport { ChartCanvas } from './components/Chart';\n\nimport './App.scss';\n\nfunction App() {\n  const [rateHistory, setRateHistory] = useState([]);\n  const counter = useRef(0);\n\n  const appendRate = async () => {\n    const { USD, EUR } = await fetch('https://api.exchangeratesapi.io/latest?base=RUB&symbols=USD,EUR')\n      .then(res => res.json())\n      .then(data => data.rates)\n      .catch(() => { console.error('API is not available') });\n\n      const prevHistory = rateHistory.length > 9\n        ? rateHistory.slice(1)\n        : rateHistory;\n\n    setRateHistory([\n      ...prevHistory,\n      {\n        id: counter.current,\n        timestamp: Date.now(),\n        usd: formatRate(USD),\n        eur: formatRate(EUR)\n      }\n    ]);\n\n    counter.current++;\n  }\n\n  const formatRate = (rate) => ((1 / rate).toFixed(2));\n\n  const rates = {\n    labels: rateHistory.map(rate => dayjs(rate.timestamp).format('HH:mm')),\n    usd: rateHistory.map(rate => rate.usd),\n    eur: rateHistory.map(rate => rate.eur)\n  };\n\n  useInterval(appendRate, (0.1 * 60 * 1000));\n\n  return (\n    <div className='App Container'>\n      <Header />\n      <div className='App__content Row'>\n        <div className='Col Col_4'>\n          <Table rates={rateHistory} />\n        </div>\n        <div className='Col Col_8'>\n          <ChartCanvas rates={rates} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let interval = setInterval(tick, delay)\n      return () => clearInterval(interval)\n    }\n  }, [delay])\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}